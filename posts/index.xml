<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Achi_kyw的札記</title>
        <link>https://achi-kyw.github.io/posts/</link>
        <description>Recent content in Posts on Achi_kyw的札記</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-tw</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Mon, 02 Jan 2023 19:39:00 +0800</lastBuildDate>
        <atom:link href="https://achi-kyw.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>111學年度第一學期修課回顧</title>
            <link>https://achi-kyw.github.io/posts/2023/01/111%E5%AD%B8%E5%B9%B4%E5%BA%A6%E7%AC%AC%E4%B8%80%E5%AD%B8%E6%9C%9F%E4%BF%AE%E8%AA%B2%E5%9B%9E%E9%A1%A7/</link>
            <pubDate>Mon, 02 Jan 2023 19:39:00 +0800</pubDate>
            
            <guid>https://achi-kyw.github.io/posts/2023/01/111%E5%AD%B8%E5%B9%B4%E5%BA%A6%E7%AC%AC%E4%B8%80%E5%AD%B8%E6%9C%9F%E4%BF%AE%E8%AA%B2%E5%9B%9E%E9%A1%A7/</guid>
            <description>以前沒有寫過類似的文章，這篇就當試試水溫吧。
這邊應該只會涉及這學期的修課心得，大一上其他部分就看心情要不要寫吧。 這學期總共修了21學分，還算應付得來，不過之後應該不想修那麼多學分了。（我發現我之後可能會打臉我自己）
計算機程式設計 這堂課就教了程式設計（廢話）
這堂課教的是C語言，我之前雖然寫過C，但已經改用C++四年了，回來寫C還是有點不習慣。
這堂課的評分標準是100%上機考，每三周考一次，一次三題，每題100分。比較特別的是考試會看CC，就是你程式中的if、 case、while、for的總數，太多會扣分。另外就是寫全域變數或goto也會扣分。第二次考試後開始有group和子題。要整個group都過才會拿到整個子題的分數，而且子題其實切得不多。
另外如果有不錯的競賽經歷也可以申請當真強者，負責驗題，如果沒出意外會給A+，但我實在是沒什麼經歷，也不知道可以投，最後被我自己請去考試了。
第一周 因為確診去考了補考，考題都是考古題，大概一小時多拿了300分出來。不過有個更強的人更早寫完，他最後也拿了1500，好扯。
第二周 這周考試竟然出現Heap，啊不就還好我有看過這種東西，這對初學者應該是蠻大的打擊吧。這次大概也是一小時多拿滿分。另外一個班是考Hash table。
第三周 上周的Heap又出現了。這次也順利地一小時拿滿分。
第四周 這次複習考古題的時候跳過了一題expression，就是輸入四則運算式後輸出結果。結果考試考的是布林值版本。痛失100分，最後只拿了200分。
第五周 考了一題WAV檔讀寫，另外expression又出現了，因為我真的非常不擅長字串處理，又沒有補題，沒寫出這題，最後跟A+說掰掰了。
最後拿了1300/1500，拿了A，身為寫程式這麼多年的人還是有些不甘心吧。
數學之美 這堂課主要是學一些數學知識或是數學史，總共考三次試。
考試的內容比較偏背，有部分題目是要背證明的，我的記憶結構好像不適合背這種東西，另外少數題目則是自己證明。不少東西其實蠻酷的，只是遇到考試就不開心了。純旁聽的話可能會覺得有趣吧
計算機概論 從電腦最基礎的電路講到高階語言（另一個班的計概講得就必較廣泛且分散）。作業的部分蠻酷的，用程式碼模擬電路和寫出組合語言，內容可以參考這個網站。
另外期中考試如果有好好準備也能拿高分，特別的是最後有個Final Project，只要做的內容屬於跟Computer Science有關的領域即可，雖然大部分的人都用Jack aka 那個網站附的物件導向「高階」語言，不過這語言有不少缺點，就不一一贅述。
很榮幸在Final Project 能與系上的一位電神雞塊合作，他在Final Project協助了我很多，非常感謝他帶我飛，不然我期末就燒雞了，這是我們的作品。
之後拿了個A+，這堂課基本上就其中好好考，期末專案好好弄，拿到A以上的機會不低。
國會與憲政民主 涼到爆的通識，主要在講美國國會的程序等等，期末是一周的期末考和期末報告，雖然也是在死線前完成就是。
我的報告做的蠻糟的，還是拿了A，算不錯吧
普通物理學甲上 老實說當時本來想選化學的，畢竟我們系規定只要普物普化普生自己選六學分就好，想說趁分科還記得一些化學相關的東西先學好，另外我物理也不是很好想說學簡單的就好。不過因為怕下學期撞課最後還是選了普物。這堂課就比較中規中矩。只是期中考我考得有點慘，蠻擔心自己會因此被當或是拿很糟的成績，還好期末還算扳回一城吧（也沒到考多好啦）。
原本估計自己會B開頭，但是期末姑且算考得可以。最後拿了A-，雖然看到單班的A+率頗高讓我稍微有點不爽就是（沒，根本是我太爛）
微積分1,2 微積分就微積分啊，我可能不擅長考試所以其實考試成績沒有到很好，大多數考試都只在平均高一點點的位置。微二的第二次小考則炸了。我真的不會通靈積分啊QQ，也因為計算很差噴了一堆分數。
兩次期考的表現，我覺得第一次有點失常，沒有拿到該拿的分數，但第二次卻比我想像中的高，大概是因為我很多計算錯誤或沒算完但給分標準剛好讓我沒被扣到那麼多分。
微積分一大概在A-
健康體適能 遇到一位給分很佛的體適能老師，全勤+參加一項運動會項目就可以A+，也體驗了學校內很多設施。
英文一 當初英檢中高級沒過不能免修。原本要選日文的，不過還是把英文放到第一志願，最後也抽到了。上課內容主要是一些中篇故事並分組報告，作業則是summary。期末考則是各組出題，都是申論題。我們這組報告其實有點糟，希望下學期的報告能改進吧。我的英文寫作沒有很好，可能有構句障礙，但我發現只要好好表達自己的想法，生活中其實不用用到學測那種華麗的作文技巧。另外這堂課教授人超好！
總結 應該可以拿到全部的學分吧&amp;hellip;&amp;hellip;
下學期還是有點想修一些地理歷史或音樂相關的課。</description>
            <content type="html"><![CDATA[<p>以前沒有寫過類似的文章，這篇就當試試水溫吧。</p>
<p>這邊應該只會涉及這學期的修課心得，大一上其他部分就看心情要不要寫吧。
這學期總共修了21學分，還算應付得來，不過之後應該不想修那麼多學分了。（我發現我之後可能會打臉我自己）</p>
<h2 id="計算機程式設計">計算機程式設計</h2>
<p>這堂課就教了程式設計（廢話）</p>
<p>這堂課教的是C語言，我之前雖然寫過C，但已經改用C++四年了，回來寫C還是有點不習慣。</p>
<p>這堂課的評分標準是100%上機考，每三周考一次，一次三題，每題100分。比較特別的是考試會看CC，就是你程式中的<code>if</code>、 <code>case</code>、<code>while</code>、<code>for</code>的總數，太多會扣分。另外就是寫全域變數或<code>goto</code>也會扣分。第二次考試後開始有group和子題。要整個group都過才會拿到整個子題的分數，而且子題其實切得不多。</p>
<p>另外如果有不錯的競賽經歷也可以申請當真強者，負責驗題，如果沒出意外會給A+，但我實在是沒什麼經歷，也不知道可以投，最後被我自己請去考試了。</p>
<h3 id="第一周">第一周</h3>
<p>因為確診去考了補考，考題都是考古題，大概一小時多拿了300分出來。不過有個更強的人更早寫完，他最後也拿了1500，好扯。</p>
<h3 id="第二周">第二周</h3>
<p>這周考試竟然出現Heap，啊不就還好我有看過這種東西，這對初學者應該是蠻大的打擊吧。這次大概也是一小時多拿滿分。另外一個班是考Hash table。</p>
<h3 id="第三周">第三周</h3>
<p>上周的Heap又出現了。這次也順利地一小時拿滿分。</p>
<h3 id="第四周">第四周</h3>
<p>這次複習考古題的時候跳過了一題expression，就是輸入四則運算式後輸出結果。結果考試考的是布林值版本。痛失100分，最後只拿了200分。</p>
<h3 id="第五周">第五周</h3>
<p>考了一題WAV檔讀寫，另外expression又出現了，因為我真的非常不擅長字串處理，又沒有補題，沒寫出這題，最後跟A+說掰掰了。</p>
<p>最後拿了1300/1500，拿了A，身為寫程式這麼多年的人還是有些不甘心吧。</p>
<h2 id="數學之美">數學之美</h2>
<p>這堂課主要是學一些數學知識或是數學史，總共考三次試。</p>
<p>考試的內容比較偏背，有部分題目是要背證明的，我的記憶結構好像不適合背這種東西，另外少數題目則是自己證明。不少東西其實蠻酷的，只是遇到考試就不開心了。純旁聽的話可能會覺得有趣吧</p>
<h2 id="計算機概論">計算機概論</h2>
<p>從電腦最基礎的電路講到高階語言（另一個班的計概講得就必較廣泛且分散）。作業的部分蠻酷的，用程式碼模擬電路和寫出組合語言，內容可以參考<a href="https://www.nand2tetris.org/">這個網站</a>。</p>
<p>另外期中考試如果有好好準備也能拿高分，特別的是最後有個Final Project，只要做的內容屬於跟Computer Science有關的領域即可，雖然大部分的人都用Jack aka 那個網站附的物件導向「高階」語言，不過這語言有不少缺點，就不一一贅述。</p>
<p>很榮幸在Final Project 能與系上的一位電神雞塊合作，他在Final Project協助了我很多，非常感謝他帶我飛，不然我期末就燒雞了，這是<a href="https://github.com/rk42745417/jack_shooting_game">我們的作品</a>。</p>
<p>之後拿了個A+，這堂課基本上就其中好好考，期末專案好好弄，拿到A以上的機會不低。</p>
<h2 id="國會與憲政民主">國會與憲政民主</h2>
<p>涼到爆的通識，主要在講美國國會的程序等等，期末是一周的期末考和期末報告，雖然也是在死線前完成就是。</p>
<p>我的報告做的蠻糟的，還是拿了A，算不錯吧</p>
<h2 id="普通物理學甲上">普通物理學甲上</h2>
<p>老實說當時本來想選化學的，畢竟我們系規定只要普物普化普生自己選六學分就好，想說趁分科還記得一些化學相關的東西先學好，另外我物理也不是很好想說學簡單的就好。不過因為怕下學期撞課最後還是選了普物。這堂課就比較中規中矩。只是期中考我考得有點慘，蠻擔心自己會因此被當或是拿很糟的成績，還好期末還算扳回一城吧（也沒到考多好啦）。</p>
<p>原本估計自己會B開頭，但是期末姑且算考得可以。最後拿了A-，雖然看到單班的A+率頗高讓我稍微有點不爽就是（沒，根本是我太爛）</p>
<h2 id="微積分12">微積分1,2</h2>
<p>微積分就微積分啊，我可能不擅長考試所以其實考試成績沒有到很好，大多數考試都只在平均高一點點的位置。微二的第二次小考則炸了。我真的不會通靈積分啊QQ，也因為計算很差噴了一堆分數。</p>
<p>兩次期考的表現，我覺得第一次有點失常，沒有拿到該拿的分數，但第二次卻比我想像中的高，大概是因為我很多計算錯誤或沒算完但給分標準剛好讓我沒被扣到那麼多分。</p>
<p>微積分一大概在A-</p>
<h2 id="健康體適能">健康體適能</h2>
<p>遇到一位給分很佛的體適能老師，全勤+參加一項運動會項目就可以A+，也體驗了學校內很多設施。</p>
<h2 id="英文一">英文一</h2>
<p>當初英檢中高級沒過不能免修。原本要選日文的，不過還是把英文放到第一志願，最後也抽到了。上課內容主要是一些中篇故事並分組報告，作業則是summary。期末考則是各組出題，都是申論題。我們這組報告其實有點糟，希望下學期的報告能改進吧。我的英文寫作沒有很好，可能有構句障礙，但我發現只要好好表達自己的想法，生活中其實不用用到學測那種華麗的作文技巧。另外這堂課教授人超好！</p>
<h2 id="總結">總結</h2>
<p>應該可以拿到全部的學分吧&hellip;&hellip;</p>
<p>下學期還是有點想修一些地理歷史或音樂相關的課。</p>
]]></content>
        </item>
        
        <item>
            <title>TIOJ 1687 樹上詢問 題解</title>
            <link>https://achi-kyw.github.io/posts/2022/10/tioj-1687-%E6%A8%B9%E4%B8%8A%E8%A9%A2%E5%95%8F-%E9%A1%8C%E8%A7%A3/</link>
            <pubDate>Mon, 10 Oct 2022 19:30:00 +0800</pubDate>
            
            <guid>https://achi-kyw.github.io/posts/2022/10/tioj-1687-%E6%A8%B9%E4%B8%8A%E8%A9%A2%E5%95%8F-%E9%A1%8C%E8%A7%A3/</guid>
            <description>第一篇文先把高中的資訊作業偷過來，所以這個文體可能比較正式一點。
題目連結
題解 LCA 這題是經典的樹上的LCA(Lowest Common Ancester，最近共同祖先)，可以用在生物等層面，如尋找兩生物親緣關係，若LCA距離較近，代表親緣關係也較近。LCA也有許多處理方式，如以下：
暴力解：先對整棵樹DFS(深度優先搜尋)之後紀錄每個點的深度及父節點。對於查詢的點\(A\),\(B\)，先把較深的點向上爬到和另一個點一樣深之後，再一起向上爬，直到爬到兩者相同。時間複雜度：預處理\(\mathcal{O}(N)\)，查詢複雜度\(\mathcal{O}(QN)\)，本題若使用暴力會超時（Time Limit Exceeded, TLE），且實作較麻煩。
樹壓平取LCA：先對數歐拉遍歷後，對於遍歷完的深度序列進行RMQ(區間最小值查詢)。時間複雜度：預處理\(\mathcal{O}(N)\)，查詢複雜度\(\mathcal{O}(Q \log N)\)，不會TLE。
Doubling 倍增法：我在寫本題使用的方法，寫起來較為方便，預處理方式與暴力解幾乎相同，除了記錄深度及父節點之外，也要記錄該節點的\(2^i(0 \leq i \leq \log N)\)倍祖先，如以下式（\(pa[p]\)代表\(p\)點的父節點，\(anc[p][i]\)代表\(p\)點的\(2^i\)倍祖先）：
$$anc[p][i] = \begin{cases} -1, \ p\ is\ root \\ pa[p], \ i=0 \\ anc[anc[p][i-1]][i-1], \ otherwise \end{cases}$$
以上式子可以在\(\mathcal{O}(N \log N)\)之內跑完，之後在詢問時同樣檢查兩個節點的深度，計算出兩者的深度差，再將較深者每次上升深度差轉成二進位後每一位所代表的二的冪次。如以下程式碼（a代表較淺的點，b則是較深的點），時間複雜度為\(\mathcal{O}(\log N)\)：
x=0;for(int i=dep[b]-dep[a];i&amp;gt;0;i/=2){if(i%2) b=anc[b][x];x++;} 接下來，假設兩者的第\(t\)輩祖先即是LCA，我們可以透過二分搜 找出這個\(t\)。處理的時候\(i\)由大到小處理（\(i\)代表二的冪次）代表如果發現\(2^i\)輩祖先不同，就將兩者換為原本的第\(2^i\)輩祖先，時間複雜度為\(\mathcal{O}(\log N)\)，如以下程式碼（MAXLOG代表\(\lceil \log_2 N \rceil\)）：
for(int i=MAXLOG-1;i&amp;gt;=0;i--){if(anc[a][i]!=anc[b][i]){a=anc[a][i];b=anc[b][i];}}lca=anc[a][0]; 而本題所求為a點到b點所經過最短距離中從a點走\(K\)步的距離，處理時先判斷走\(K\)步是否有超過兩者的LCA，再同樣以類似上面爬到同深度的方法找出該步所在的點。
此外，還有如Tarjan&amp;rsquo;s Algorithm、Heavy-Light Decomposition 等等方法可以解決LCA問題。
心得 以上內容我在網路上尋找相關資料，以及參考學長的講義之後，經歷過多次的debug，也是我少數在非競賽中上傳次數超過十次的題目。一開始寫好的程式在多次的MLE及WA中，每次都找出我一個漏洞，這些問題有大有小，但都足以影響結果。這也是寫題目必經的過程，期許不久後的我能更強。（結果自己反而變爛了QQ）</description>
            <content type="html"><![CDATA[<p>第一篇文先把高中的資訊作業偷過來，所以這個文體可能比較正式一點。</p>
<p><a href="https://tioj.ck.tp.edu.tw/problems/1687">題目連結</a></p>
<h2 id="題解">題解</h2>
<h3 id="lca">LCA</h3>
<p>這題是經典的樹上的LCA(Lowest Common Ancester，最近共同祖先)，可以用在生物等層面，如尋找兩生物親緣關係，若LCA距離較近，代表親緣關係也較近。LCA也有許多處理方式，如以下：</p>
<p><strong>暴力解</strong>：先對整棵樹DFS(深度優先搜尋)之後紀錄每個點的深度及父節點。對於查詢的點\(A\),\(B\)，先把較深的點向上爬到和另一個點一樣深之後，再一起向上爬，直到爬到兩者相同。時間複雜度：預處理\(\mathcal{O}(N)\)，查詢複雜度\(\mathcal{O}(QN)\)，本題若使用暴力會超時（Time Limit Exceeded, TLE），且實作較麻煩。</p>
<p><strong>樹壓平取LCA</strong>：先對數歐拉遍歷後，對於遍歷完的深度序列進行RMQ(區間最小值查詢)。時間複雜度：預處理\(\mathcal{O}(N)\)，查詢複雜度\(\mathcal{O}(Q \log N)\)，不會TLE。</p>
<p><strong>Doubling 倍增法</strong>：我在寫本題使用的方法，寫起來較為方便，預處理方式與暴力解幾乎相同，除了記錄深度及父節點之外，也要記錄該節點的\(2^i(0 \leq i \leq \log N)\)倍祖先，如以下式（\(pa[p]\)代表\(p\)點的父節點，\(anc[p][i]\)代表\(p\)點的\(2^i\)倍祖先）：</p>
<p>$$anc[p][i] = \begin{cases} -1, \ p\  is\  root \\ pa[p], \ i=0 \\ anc[anc[p][i-1]][i-1], \ otherwise \end{cases}$$</p>
<p>以上式子可以在\(\mathcal{O}(N \log N)\)之內跑完，之後在詢問時同樣檢查兩個節點的深度，計算出兩者的深度差，再將較深者每次上升深度差轉成二進位後每一位所代表的二的冪次。如以下程式碼（a代表較淺的點，b則是較深的點），時間複雜度為\(\mathcal{O}(\log N)\)：</p>
<pre tabindex="0"><code class="language-cpp=" data-lang="cpp=">x=0;
for(int i=dep[b]-dep[a];i&gt;0;i/=2){
    if(i%2) b=anc[b][x];
    x++;
}
</code></pre><p>接下來，假設兩者的第\(t\)輩祖先即是LCA，我們可以透過二分搜
找出這個\(t\)。處理的時候\(i\)由大到小處理（\(i\)代表二的冪次）代表如果發現\(2^i\)輩祖先不同，就將兩者換為原本的第\(2^i\)輩祖先，時間複雜度為\(\mathcal{O}(\log N)\)，如以下程式碼（<code>MAXLOG</code>代表\(\lceil \log_2 N \rceil\)）：</p>
<pre tabindex="0"><code class="language-cpp=" data-lang="cpp=">for(int i=MAXLOG-1;i&gt;=0;i--){
    if(anc[a][i]!=anc[b][i]){
        a=anc[a][i];
        b=anc[b][i];
    }
}
lca=anc[a][0];
</code></pre><p>而本題所求為a點到b點所經過最短距離中從a點走\(K\)步的距離，處理時先判斷走\(K\)步是否有超過兩者的LCA，再同樣以類似上面爬到同深度的方法找出該步所在的點。</p>
<p>此外，還有如Tarjan&rsquo;s Algorithm、Heavy-Light Decomposition 等等方法可以解決LCA問題。</p>
<h3 id="心得">心得</h3>
<p>以上內容我在網路上尋找相關資料，以及參考學長的講義之後，經歷過多次的debug，也是我少數在非競賽中上傳次數超過十次的題目。一開始寫好的程式在多次的MLE及WA中，每次都找出我一個漏洞，這些問題有大有小，但都足以影響結果。這也是寫題目必經的過程，期許不久後的我能更強。（結果自己反而變爛了QQ）</p>
<p>AC Code（下一頁）:</p>
<pre tabindex="0"><code class="language-cpp=" data-lang="cpp=">#include&lt;bits/stdc++.h&gt;
using namespace std;
#define IO ios_base::sync_with_stdio(false),cin.tie(0);
#define ll long long
#define pii pair&lt;int,int&gt;
#define MAXLOG 20
vector&lt;int&gt; e[100010];
int pa[100010],dep[100010];
int anc[100010][MAXLOG];
bool v[100010];
inline void dfs(int p){
    for(auto i:e[p])if(!v[i]){
        pa[i]=p;
        dep[i]=dep[p]+1;
        v[i]=1;
        dfs(i);
    }
}
int main(){
    IO
    int n,q,ef,es;
    memset(v,0,sizeof(v));
    cin&gt;&gt;n&gt;&gt;q;
    for(int i=0 ;i&lt;n-1;i++){
        cin&gt;&gt;ef&gt;&gt;es;
        e[ef].push_back(es);
        e[es].push_back(ef);
    }
    v[1]=1;
    dfs(1);
    anc[1][0]=-1;
    for(int i=1;i&lt;=n;i++){
        anc[i][0]=pa[i];
    }
    for(int j=1;j&lt;MAXLOG;j++){
        for(int i=1;i&lt;=n;i++){
            if(j==1) anc[i][0]=pa[i];
            anc[i][j]=anc[anc[i][j-1]][j-1];
        }
    }
    int lf,ls,lca,s,t,k,a,b,x,mind;
    while(q--){
        cin&gt;&gt;s&gt;&gt;t&gt;&gt;k;
        a=s,b=t;lf=0;ls=0;
        if(dep[a]&gt;dep[b]) swap(a,b),lf=dep[b]-dep[a];
        else ls=dep[b]-dep[a];
        mind=a;
        x=0;
        for(int i=dep[b]-dep[a];i&gt;0;i/=2){
            if(i%2)
                b=anc[b][x];
            x++;
        }
        if(a!=b){
            for(int i=MAXLOG-1;i&gt;=0;i--){
                if(anc[a][i]!=anc[b][i]){
                    a=anc[a][i];
                    b=anc[b][i];
                }
            }
            lca=anc[a][0];
        }
        else{
            lca=a;
        }
        lf+=dep[mind]-dep[lca],ls+=dep[mind]-dep[lca];
        x=0;
        if(k&gt;lf+ls)cout&lt;&lt;&#34;-1\n&#34;;
        else if(k&gt;lf){
            k-=lf;
            for(int i=ls-k;i&gt;0;i/=2){
                if(i%2)
                    t=anc[t][x];
                x++;
            }
            cout&lt;&lt;t&lt;&lt;&#39;\n&#39;;
        }
        else if(k==lf) cout&lt;&lt;lca&lt;&lt;&#39;\n&#39;;
        else if(k==0) cout&lt;&lt;s&lt;&lt;&#39;\n&#39;;
        else{
            for(int i=k;i&gt;0;i/=2){
                if(i%2)
                    s=anc[s][x];
                x++;
            }
            cout&lt;&lt;s&lt;&lt;&#39;\n&#39;;
        }
    }
    return 0;
}
</code></pre>]]></content>
        </item>
        
    </channel>
</rss>
